---
import { twMerge } from 'tailwind-merge'
import stagesData from '../../../../lib/constants/stageData'
import AudioPlayer from '../../molecules/audio-player/AudioPlayer.astro'
// import { wrapper } from '../../../../constants/constantStyles'
const wrapper = 'flex flex-col mx-[10px] md:mx-auto w-full px-4 max-w-[280px] md:max-w-[720px] lg:max-w-[1140px] gap-[40px] items-center'
---

{
	stagesData.map(stage => (
		<!-- Kontener główny - dodajemy min-height i zachowujemy stałe wymiary -->
<section id={stage.category} class={twMerge(stage.backgroundColor, 'py-20 relative')}>
  <div class={twMerge(wrapper, 'step min-h-[400px] flex flex-col items-center justify-start gap-[40px]')}>
    <!-- Header section -->
    <div class='flex gap-[10px] items-center h-[60px] w-full'>
      <img src={stage.icon} class="w-[50px] h-[50px]"/>
      <h2 class="text-4xl font-tavares mt-[9px] font-bold">{stage.title}</h2>
    </div>
    
    <!-- Description -->
    <p class="text-xl w-full">{stage.description}</p>
    
    <!-- Button - dodajemy własny kontener z określoną szerokością -->
    <div class="w-full flex justify-center">
      <button class="py-2 w-full md:w-2/5 border text-center">
        <a href='/#participa' class="font-tavares text-xl block">Participa en Yincana</a>
      </button>
    </div>
    
    <!-- Audio players -->
    <div class='flex justify-around w-full mt-auto'>
      {stage.audios.map(audio => (
        <AudioPlayer
          audio={audio}
          iconPause={stage.iconPause}
          iconPlay={stage.iconPlay}
        />
      ))}
    </div>
  </div>

  <!-- Transcripts container -->
  <div class="w-full max-w-[280px] md:max-w-[720px] lg:max-w-[1140px] mx-auto">
    {stage.audios.map(audio => (
      <div class='audio-transcript hidden absolute top-0 left-0 w-full bg-inherit p-4'>
        <button class='close-transcript absolute top-4 right-4 p-2'>x</button>
        <p set:html={audio.transcript} />
      </div>
    ))}
  </div>
</section>
	))
}

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const audios = document.querySelectorAll('audio');
    const playIcons = document.querySelectorAll('.play-icon');
    const pauseIcons = document.querySelectorAll('.pause-icon');
    const transcriptButtons = Array.from(document.querySelectorAll('.transcript-open-button'));
    const audioTranscripts = Array.from(document.querySelectorAll('.audio-transcript'));
    const closeTranscriptButtons = Array.from(document.querySelectorAll('.close-transcript'));
    const steps = Array.from(document.querySelectorAll('.step'));

    // Początkowy stan
    const resetLayout = () => {
      steps.forEach(step => {
        step.style.display = 'flex';
        step.style.opacity = '1';
      });
      audioTranscripts.forEach(transcript => {
        transcript.style.display = 'none';
      });
    };

    resetLayout();

    transcriptButtons.forEach((button, i) => {
      button.addEventListener('click', () => {
        const section = button.closest('section');
        const step = section?.querySelector('.step');
        const transcript = audioTranscripts[i];

        if (step && transcript) {
          step.style.opacity = '0';
          setTimeout(() => {
            step.style.display = 'none';
            transcript.style.display = 'block';
          }, 300);
        }
      });
    });

    closeTranscriptButtons.forEach((button, i) => {
      button.addEventListener('click', () => {
        const section = button.closest('section');
        const step = section?.querySelector('.step');
        const transcript = audioTranscripts[i];

        if (step && transcript) {
          transcript.style.display = 'none';
          step.style.display = 'flex';
          setTimeout(() => {
            step.style.opacity = '1';
          }, 50);
        }
      });
    });

    // Reszta kodu dla obsługi audio pozostaje bez zmian
  });
</script>
