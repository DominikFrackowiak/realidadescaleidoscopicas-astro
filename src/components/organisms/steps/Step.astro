---
import { twMerge } from 'tailwind-merge'
import stagesData from '../../../../lib/constants/stageData'
import AudioPlayer from '../../molecules/audio-player/AudioPlayer.astro'
// import { wrapper } from '../../../../constants/constantStyles'
const wrapper = 'flex flex-col mx-[10px] md:mx-auto w-full px-4 max-w-[280px] md:max-w-[720px] lg:max-w-[1140px] gap-[40px]'
---

{
	stagesData.map(stage => (
		<section id={stage.category} class={twMerge(stage.backgroundColor, 'py-20')}>
			
				<div class={twMerge(wrapper, 'step')}>
					<div class='flex gap-[10px] items-center h-[60px]'>
						<img src={stage.icon} class="w-[50px] h-[50px]"/>
						<h2 class="text-4xl font-tavares mt-[9px] font-bold">{stage.title}</h2>
					</div>
					<p class="text-xl">{stage.description}</p>
					<button class="py-2 w-full md:w-2/5 self-center border">
						<a href='/#participa' class="font-tavares text-xl">Participa en Yincana</a>
					</button>
					<div class='flex justify-around w-full'>
						{stage.audios.map(audio => (
							<AudioPlayer
								audio={audio}
								iconPause={stage.iconPause}
								iconPlay={stage.iconPlay}
							/>
						))}
					</div>
				</div>
				<div>
					{stage.audios.map(audio => (
						<div class='audio-transcript display-none'>
							<button class='close-transcript'>x</button>
							<p set:html={audio.transcript} />
						</div>
					))}
				</div>
			
		</section>
	))
}

<script is:inline>
	document.addEventListener('DOMContentLoaded', () => {
	const audios = document.querySelectorAll('audio')
	const playIcons = document.querySelectorAll('.play-icon')
	const pauseIcons = document.querySelectorAll('.pause-icon')
	const transcriptButtons = [
		...document.querySelectorAll('.transcript-open-button'),
	]
	const audioTranscripts = [...document.querySelectorAll('.audio-transcript')]
	const closeTranscriptButtons = [
		...document.querySelectorAll('.close-transcript'),
	]
	const steps = [...document.querySelectorAll('.step')]

	let isTranscriptOpen = false

	playIcons.forEach((icon, i) => {
		icon.addEventListener('click', () => {
			audios.forEach((audio, index) => {
				audio.pause()
				playIcons[index].classList.remove('display-none')
				pauseIcons[index].classList.add('display-none')
			})

			audios[i].play()
			playIcons[i].classList.add('display-none')
			pauseIcons[i].classList.remove('display-none')
		})
	})

	pauseIcons.forEach((icon, i) =>
		icon.addEventListener('click', () => {
			audios[i].pause()
			playIcons[i].classList.remove('display-none')
			pauseIcons[i].classList.add('display-none')
		})
	)

	transcriptButtons.forEach((button, i) => {
		button.addEventListener('click', () => {
			audioTranscripts.forEach(x => x.classList.add('display-none'))
			audioTranscripts[i].classList.remove('display-none')
			const section = audioTranscripts[i].closest('section')
			steps.forEach(step => step.classList.remove('display-none'))
			const step = section?.querySelector('.step')
			step?.classList.add('display-none')
		})
	})

	closeTranscriptButtons.forEach((button, i) => {
		button.addEventListener('click', () => {
			// audioTranscripts.forEach(x => x.classList.add('display-none'))
			audioTranscripts[i].classList.add('display-none')
			const section = audioTranscripts[i].closest('section')
			const step = section?.querySelector('.step')
			step?.classList.remove('display-none')
		})
	})
})
</script>
