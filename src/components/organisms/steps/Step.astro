---
import { twMerge } from 'tailwind-merge'
import stagesData from '../../../../lib/constants/stageData'
import AudioPlayer from '../../molecules/audio-player/AudioPlayer.astro'
import Transcript from './Transcript.astro'

const wrapper = 'flex flex-col mx-auto w-full px-4 md:px-0 md:max-w-[720px] lg:max-w-[1140px] gap-[40px]'
---

{
  stagesData.map((stage, stageIndex) => (
    <section 
      id={`stage-${stage.category}`} 
      data-category={stage.category}
      class={twMerge(stage.backgroundColor, 'flex justify-center items-center py-20 min-h-[100vh] w-full main-section')}
    >
      <div class={twMerge(wrapper, 'step')}>
        <div class='flex gap-[10px] items-center h-[60px]'>
          <img src={stage.icon} class="w-[35px] h-[35px] md:w-[50px] md:h-[50px]"/>
          <h2 class={twMerge(stage.titleColor,"text-2xl md:text-4xl font-tavares md:mt-[9px] font-bold")}>{stage.title}</h2>
        </div>
        <p class={twMerge(stage.descriptionColor, "text-xl")}>{stage.description}</p>
        <button class={twMerge(stage.buttonBgColor, stage.buttonBgColorOnHover, "py-2 w-[80%] md:w-full md:w-2/5 relative mx-auto")}>
          <a href='/#participa' class={twMerge("font-tavares lg:text-xl text-white block text-center")}>
            Participa en Yincana
          </a>
        </button>
        <div class='flex flex-col gap-[40px] md:flex-row justify-around w-full'>
          {stage.audios.map((audio, audioIndex) => (
            <div class="audio-container w-full">
              <AudioPlayer
                audio={audio}
                iconPause={stage.iconPause}
                iconPlay={stage.iconPlay}
                hrColor={stage.borderColor}
                textColor={stage.audioTextColor}
                stageIndex={stageIndex}
                audioIndex={audioIndex}
              />
            </div>
          ))}
        </div>
      </div>
    </section>

    <section 
      id={`transcript-section-${stageIndex}`}
      class={twMerge(
        stage.transcriptBgColor, 
        'flex flex-col justify-center items-center py-20 min-h-[100vh] w-full transcript-section'
      )}
      style="display: none;"
    >
      {stage.audios.map((audio, audioIndex) => (
        <div 
          id={`transcript-${stageIndex}-${audioIndex}`}
          class={twMerge(
            wrapper,
            "audio-transcript relative w-full flex flex-col items-center gap-[40px]"
          )}
          data-stage={stageIndex}
          data-audio={audioIndex}
          style="display: none;"
        >
          <Transcript audio={audio} stageIndex={stageIndex} audioIndex={audioIndex}/>
        </div>
      ))}
    </section>
  ))
}

<script>
  // import handleAudiosAndTranscripts from '../../../scripts/audiosTranscripts'
  // handleAudiosAndTranscripts()
  document.addEventListener('DOMContentLoaded', () => {
		const audios = document.querySelectorAll<HTMLAudioElement>('audio')
		const playIcons = document.querySelectorAll<HTMLDivElement>('.play-icon')
		const pauseIcons = document.querySelectorAll<HTMLDivElement>('.pause-icon')
		const transcriptButtons = document.querySelectorAll<HTMLButtonElement>(
			'.transcript-open-button'
		)
		const audioTranscripts =
			document.querySelectorAll<HTMLDivElement>('.audio-transcript')
		const closeTranscriptButtons =
			document.querySelectorAll<HTMLButtonElement>('.close-transcript')
		const mainSections =
			document.querySelectorAll<HTMLDivElement>('.main-section')
		const transcriptSections = document.querySelectorAll<HTMLDivElement>(
			'.transcript-section'
		)

		// Funkcja do płynnego przewijania do elementu
		const smoothScrollToElement = (element: HTMLElement) => {
			const headerOffset = 0 // Dostosuj tę wartość jeśli masz stały header
			const elementPosition = element.getBoundingClientRect().top
			const offsetPosition = elementPosition + window.pageYOffset - headerOffset

			window.scrollTo({
				top: offsetPosition,
				behavior: 'smooth',
			})
		}

		// Obsługa audio
		pauseIcons.forEach(icon => {
			icon.style.display = 'none'
		})

		playIcons.forEach((icon, i) => {
			icon.addEventListener('click', () => {
				audios.forEach((audio, index) => {
					audio.pause()
					playIcons.item(index).style.display = 'block'
					pauseIcons.item(index).style.display = 'none'
				})

				audios.item(i).play()
				icon.style.display = 'none'
				pauseIcons.item(i).style.display = 'block'
			})
		})

		pauseIcons.forEach((icon, i) => {
			icon.addEventListener('click', () => {
				audios.item(i).pause()
				playIcons.item(i).style.display = 'block'
				icon.style.display = 'none'
			})
		})

		// Logika transkryptów
		transcriptButtons.forEach(button => {
			button.addEventListener('click', () => {
				const stageIndex = button.getAttribute('data-stage')
				const audioIndex = button.getAttribute('data-audio')

				if (stageIndex !== null) {
					const idx = parseInt(stageIndex)

					// Ukryj główną sekcję
					mainSections.item(idx).style.display = 'none'

					// Pokaż sekcję transkryptów
					transcriptSections.item(idx).style.display = 'flex'

					// Ukryj wszystkie transkrypty w tej sekcji
					audioTranscripts.forEach(transcript => {
						if (transcript.getAttribute('data-stage') === stageIndex) {
							transcript.style.display = 'none'
						}
					})

					// Pokaż odpowiedni transkrypt
					const targetTranscript = document.querySelector<HTMLDivElement>(
						`#transcript-${stageIndex}-${audioIndex}`
					)
					if (targetTranscript) {
						targetTranscript.style.display = 'flex'
						// Przewiń do transkryptu
						setTimeout(() => {
							const transcriptSection = document.querySelector<HTMLElement>(
								`#transcript-section-${stageIndex}`
							)
							if (transcriptSection) {
								smoothScrollToElement(transcriptSection)
							}
						}, 0)
					}
				}
			})
		})

		closeTranscriptButtons.forEach(button => {
			button.addEventListener('click', () => {
				const stageIndex = button.getAttribute('data-stage')

				if (stageIndex !== null) {
					const idx = parseInt(stageIndex)

					// Ukryj sekcję transkryptów
					transcriptSections.item(idx).style.display = 'none'

					// Pokaż główną sekcję
					const mainSection = mainSections.item(idx)
					mainSection.style.display = 'flex'

					// Ukryj wszystkie transkrypty
					audioTranscripts.forEach(transcript => {
						if (transcript.getAttribute('data-stage') === stageIndex) {
							transcript.style.display = 'none'
						}
					})

					// Przewiń do początku odpowiedniej sekcji głównej
					smoothScrollToElement(mainSection)
				}
			})
		})
	})
</script>