---
import { twMerge } from 'tailwind-merge'
import stagesData from '../../../../lib/constants/stageData'
import AudioPlayer from '../../molecules/audio-player/AudioPlayer.astro'
import Transcript from './Transcript.astro'

const wrapper = 'flex flex-col mx-auto w-full px-4 md:px-0 md:max-w-[720px] lg:max-w-[1140px] gap-[70px]'
---

{
  stagesData.map((stage, stageIndex) => (
    <section 
      id={`stage-${stage.category}`} 
      data-category={stage.category}
      class={twMerge(stage.backgroundColor, 'flex justify-center items-center py-20 min-h-[100vh] w-full main-section')}
    >
      <div class={twMerge(wrapper, 'step')}>
        <div class='flex gap-[10px] items-center h-[60px]'>
          <img src={stage.icon} class="w-[35px] h-[35px] md:w-[50px] md:h-[50px]"/>
          <h2 class={twMerge(stage.titleColor,"text-2xl md:text-4xl font-tavares md:mt-[9px] font-bold")}>{stage.title}</h2>
        </div>
        <p class={twMerge(stage.descriptionColor, "text-xl")}>{stage.description}</p>
        <button class={twMerge(stage.buttonBgColor, stage.buttonBgColorOnHover, "py-2 w-[80%] md:w-2/5 relative mx-auto")}>
          <a href='/#opina' class={twMerge("font-tavares lg:text-xl text-white block text-center")}>
            Participa en Yincana
          </a>
        </button>
        <div class='flex flex-col gap-[40px] md:flex-row justify-around w-full'>
          {stage.audios.map((audio, audioIndex) => (
            <div class="audio-container w-full">
              <AudioPlayer
                audio={audio}
                iconPause={stage.iconPause}
                iconPlay={stage.iconPlay}
                hrColor={stage.borderColor}
                textColor={stage.audioTextColor}
                stageIndex={stageIndex}
                audioIndex={audioIndex}
              />
            </div>
          ))}
        </div>
      </div>
    </section>

    <section 
      id={`transcript-section-${stageIndex}`}
      class={twMerge(
        stage.transcriptBgColor, 
        'flex flex-col justify-center items-center py-20 min-h-[100vh] w-full transcript-section'
      )}
      style="display: none;"
    >
      {stage.audios.map((audio, audioIndex) => (
        <div 
          id={`transcript-${stageIndex}-${audioIndex}`}
          class={twMerge(
            wrapper,
            "audio-transcript relative w-full flex flex-col items-center gap-[40px]"
          )}
          data-stage={stageIndex}
          data-audio={audioIndex}
          style="display: none;"
        >
          <Transcript audio={audio} stageIndex={stageIndex} audioIndex={audioIndex}/>
        </div>
      ))}
    </section>
  ))
}

<script>
document.addEventListener('DOMContentLoaded', () => {
  const audios = document.querySelectorAll<HTMLAudioElement>('audio')
  const playIcons = document.querySelectorAll<HTMLDivElement>('.play-icon')
  const pauseIcons = document.querySelectorAll<HTMLDivElement>('.pause-icon')
  const transcriptButtons = document.querySelectorAll<HTMLButtonElement>('.transcript-open-button')
  const audioTranscripts = document.querySelectorAll<HTMLDivElement>('.audio-transcript')
  const closeTranscriptButtons = document.querySelectorAll<HTMLButtonElement>('.close-transcript')
  const mainSections = document.querySelectorAll<HTMLDivElement>('.main-section')
  const transcriptSections = document.querySelectorAll<HTMLDivElement>('.transcript-section')

  const smoothScrollToElement = (element: HTMLElement) => {
    const headerOffset = 0
    const elementPosition = element.getBoundingClientRect().top
    const offsetPosition = elementPosition + window.pageYOffset - headerOffset

    window.scrollTo({
      top: offsetPosition,
      behavior: 'smooth',
    })
  }

  // Fix 1: Ensure proper audio controls visibility
  audios.forEach((audio, index) => {
    // Set initial state
    playIcons[index].style.display = 'block'
    pauseIcons[index].style.display = 'none'

    // Add ended event listener to reset icons
    audio.addEventListener('ended', () => {
      playIcons[index].style.display = 'block'
      pauseIcons[index].style.display = 'none'
    })
  })

  playIcons.forEach((icon, i) => {
    icon.addEventListener('click', () => {
      // Pause all other audios and reset their icons
      audios.forEach((audio, index) => {
        if (index !== i) {
          audio.pause()
          playIcons[index].style.display = 'block'
          pauseIcons[index].style.display = 'none'
        }
      })

      // Play the clicked audio and update its icons
      audios[i].play()
      icon.style.display = 'none'
      pauseIcons[i].style.display = 'block'
    })
  })

  pauseIcons.forEach((icon, i) => {
    icon.addEventListener('click', () => {
      audios[i].pause()
      playIcons[i].style.display = 'block'
      icon.style.display = 'none'
    })
  })

  // Fix 2: Improved transcript navigation
  transcriptButtons.forEach(button => {
    button.addEventListener('click', () => {
      const stageIndex = button.getAttribute('data-stage')
      const audioIndex = button.getAttribute('data-audio')

      if (stageIndex !== null) {
        const idx = parseInt(stageIndex)

        mainSections[idx+1].style.display = 'none'
        
        transcriptSections[idx].style.display = 'flex'

        audioTranscripts.forEach(transcript => {
          if (transcript.getAttribute('data-stage') === stageIndex) {
            transcript.style.display = 'none'
          }
        })

        const targetTranscript = document.querySelector<HTMLDivElement>(`#transcript-${stageIndex}-${audioIndex}`)
        if (targetTranscript) {
          targetTranscript.style.display = 'flex'
          setTimeout(() => {
            const transcriptSection = document.querySelector<HTMLElement>(`#transcript-section-${stageIndex}`)
            if (transcriptSection) {
              smoothScrollToElement(transcriptSection)
            }
          }, 0)
        }
      }
    })
  })

  closeTranscriptButtons.forEach(button => {
    button.addEventListener('click', () => {
      const stageIndex = button.getAttribute('data-stage')

      if (stageIndex !== null) {
        const idx = parseInt(stageIndex)
        const currentTranscriptSection = transcriptSections[idx]
        const targetMainSection = mainSections[idx+1]

        // Hide transcript section
        currentTranscriptSection.style.display = 'none'

        // Show corresponding main section
        console.log(targetMainSection)
        targetMainSection.style.display = 'flex'
        

        // Hide all transcripts for this stage
        audioTranscripts.forEach(transcript => {
          if (transcript.getAttribute('data-stage') === stageIndex) {
            transcript.style.display = 'none'
          }
        })

        // Scroll to the correct main section
        smoothScrollToElement(targetMainSection)
      }
    })
  })
})
</script>